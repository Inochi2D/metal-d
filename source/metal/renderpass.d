/**
    MTLRenderPass

    Copyright: Copyright © 2024-2025, Kitsunebi Games EMV
    License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)
    Authors:   Luna Nielsen
*/
module metal.renderpass;
import metal.pixelformat;
import metal.device;
import metal.texture;
import metal.buffer;
import metal.types;
import foundation;
import objc;

import core.attribute : selector, optional;

/**
    An RGBA value used for a color pixel.
*/
struct MTLClearColor {
    
    /**
        The red color channel.
    */
    double red;
    
    /**
        The green color channel.
    */
    double green;
    
    /**
        The blue color channel.
    */
    double blue;
    
    /**
        The alpha channel.
    */
    double alpha;
}

/**
    Types of actions performed for an attachment at the start of a rendering pass.
*/
enum MTLLoadAction : NSUInteger {
    
    /**
        The GPU has permission to discard the existing contents of the attachment 
        at the start of the render pass, replacing them with arbitrary data.
    */
    DontCare = 0,
    
    /**
        The GPU preserves the existing contents of the attachment at the start 
        of the render pass.
    */
    Load = 1,
    
    /**
        The GPU writes a value to every pixel in the attachment at the start 
        of the render pass.
    */
    Clear = 2,
}

/**
    Types of actions performed for an attachment at the end of a rendering pass. 
*/
enum MTLStoreAction : NSUInteger {
    
    /**
        The GPU has permission to discard the rendered contents of the attachment 
        at the end of the render pass, replacing them with arbitrary data.
    */
    DontCare = 0,
    
    /**
        The GPU stores the rendered contents to the texture.
    */
    Store = 1,
    
    /**
        The GPU resolves the multisampled data to one sample per pixel and stores 
        the data to the resolve texture, discarding the multisample data afterwards.
    */
    MultisampleResolve = 2,
    
    /**
        The GPU stores the multisample data to the multisample texture, 
        resolves the data to a sample per pixel, 
        and stores the data to the resolve texture.
    */
    StoreAndMultisampleResolve = 3,
    
    /**
        The app will specify the store action when it encodes the render pass. 
    */
    Unknown = 4,
    
    /**
        The GPU stores depth data in a sample-position–agnostic representation.
    */
    CustomSampleDepthStore = 5,
}

/**
    Options that modify a store action.
*/
enum MTLStoreActionOptions : NSUInteger {

    /**
        An option that doesn't modify the intended behavior of a store action.
    */
    None                  = 0,
    
    /**
        An option that stores data in a sample-position–agnostic representation.
    */
    CustomSamplePositions = 1 << 0,
}

/**
    A render target that serves as the output destination for pixels generated by a render pass.
*/
extern(Objective-C)
extern class MTLRenderPassAttachmentDescriptor : NSObject {
@nogc nothrow:
public:

    /**
        Returns a new instance of the receiving class.
    */
    override static MTLRenderPassAttachmentDescriptor alloc() @selector("alloc");

    /**
        Implemented by subclasses to initialize a new object (the receiver) 
        immediately after memory for it has been allocated.
    */
    override MTLRenderPassAttachmentDescriptor init() @selector("init");

    /**
        The MTLTexture object for this attachment.
    */
    @property MTLTexture texture() @selector("texture");
    @property void texture(MTLTexture) @selector("setTexture:");

    /**
        The mipmap level of the texture to be used for rendering.
        
        Default is zero.
    */
    @property NSUInteger level() @selector("level");
    @property void level(NSUInteger) @selector("setLevel:");

    /**
        The slice of the texture to be used for rendering.
        
        Default is zero.
    */
    @property NSUInteger slice() @selector("slice");
    @property void slice(NSUInteger) @selector("setSlice:");

    /**
        The depth plane of the texture to be used for rendering.
        
        Default is zero.
    */
    @property NSUInteger depthPlane() @selector("depthPlane");
    @property void depthPlane(NSUInteger) @selector("setDepthPlane:");

    /**
        The texture used for multisample resolve operations.
        Only used (and required) if the store action is set to 
        MultisampleResolve.
    */
    @property MTLTexture resolveTexture() @selector("resolveTexture");
    @property void resolveTexture(MTLTexture) @selector("setResolveTexture:");

    /**
        The mipmap level of the resolve texture to be used for 
        multisample resolve.
        
        Default is zero.
    */
    @property NSUInteger resolveLevel() @selector("resolveLevel");
    @property void resolveLevel(NSUInteger) @selector("setResolveLevel:");

    /**
        The texture slice of the resolve texture to be used for 
        multisample resolve.
        
        Default is zero.
    */
    @property NSUInteger resolveSlice() @selector("resolveSlice");
    @property void resolveSlice(NSUInteger) @selector("setResolveSlice:");

    /**
        The texture depth plane of the resolve texture to be used 
        for multisample resolve.
        
        Default is zero.
    */
    @property NSUInteger resolveDepthPlane() @selector("resolveDepthPlane");
    @property void resolveDepthPlane(NSUInteger) @selector("setResolveDepthPlane:");

    /**
        The action to be performed with this attachment at the beginning of a render pass.
        Default is DontCare unless specified by a creation or init method.
    */
    @property MTLLoadAction loadAction() @selector("loadAction");
    @property void loadAction(MTLLoadAction) @selector("setLoadAction:");

    /**
        The action to be performed with this attachment at the end of a render pass.
        Default is DontCare unless specified by a creation or init method.
    */
    @property MTLStoreAction storeAction() @selector("storeAction");
    @property void storeAction(MTLStoreAction) @selector("setStoreAction:");

    /**
        Optional configuration for the store action performed with this attachment at the end of a render pass.
        
        Default is None.
    */
    @property MTLStoreActionOptions storeActionOptions() @selector("storeActionOptions");
    @property void storeActionOptions(MTLStoreActionOptions) @selector("setStoreActionOptions:");
}

/**
    A color render target that serves as the output destination 
    for color pixels generated by a render pass.
*/
extern(Objective-C)
extern class MTLRenderPassColorAttachmentDescriptor : MTLRenderPassAttachmentDescriptor {
@nogc nothrow:
public:

    /**
        Returns a new instance of the receiving class.
    */
    override static MTLRenderPassColorAttachmentDescriptor alloc() @selector("alloc");

    /**
        Implemented by subclasses to initialize a new object (the receiver) 
        immediately after memory for it has been allocated.
    */
    override MTLRenderPassColorAttachmentDescriptor init() @selector("init");

    /**
        The clear color to be used if the loadAction property is Clear
    */
    @property MTLClearColor clearColor() @selector("clearColor");
    @property void clearColor(MTLClearColor) @selector("setClearColor:");
}

/**
    An array of render pass color attachment descriptor objects.
*/
extern(Objective-C)
extern class MTLRenderPassColorAttachmentDescriptorArray : NSObject {
@nogc nothrow:
public:

    /**
        Returns a new instance of the receiving class.
    */
    override static MTLRenderPassColorAttachmentDescriptorArray alloc() @selector("alloc");

    /**
        Implemented by subclasses to initialize a new object (the receiver) 
        immediately after memory for it has been allocated.
    */
    override MTLRenderPassColorAttachmentDescriptorArray init() @selector("init");

    /**
        Gets the MTLRenderPassColorAttachmentDescriptor at the specified index.
    */
    MTLRenderPassColorAttachmentDescriptor get(NSUInteger attachmentIndex) @selector("objectAtIndexedSubscript:");

    /*
        Sets the MTLRenderPassColorAttachmentDescriptor at the specified index.

        ### Note
        > This always uses 'copy' semantics.
        > It is safe to set the attachment state at any legal index to nil, 
        > which resets that attachment descriptor state to default values.
    */
    void set(MTLRenderPassColorAttachmentDescriptor attachment, NSUInteger attachmentIndex) @selector("setObject:atIndexedSubscript:");
}

/**
    Filtering options for controlling an MSAA depth resolve operation.
    
    Supported on iOS GPU Family 3 and later.
*/
enum MTLMultisampleDepthResolveFilter : NSUInteger {
    
    /**
        No filter is applied.
    */
    Sample0 = 0,
    
    /**
        The GPU compares all depth samples in the pixel and 
        selects the sample with the smallest value.
    */
    Min = 1,
    
    /**
        The GPU compares all depth samples in the pixel and 
        selects the sample with the largest value. 
    */
    Max = 2,
}

/**
    A depth render target that serves as the output destination 
    for depth pixels generated by a render pass.
*/
extern(Objective-C)
extern class MTLRenderPassDepthAttachmentDescriptor : MTLRenderPassAttachmentDescriptor {
@nogc nothrow:
public:

    /**
        Returns a new instance of the receiving class.
    */
    override static MTLRenderPassDepthAttachmentDescriptor alloc() @selector("alloc");

    /**
        Implemented by subclasses to initialize a new object (the receiver) 
        immediately after memory for it has been allocated.
    */
    override MTLRenderPassDepthAttachmentDescriptor init() @selector("init");

    /**
        The clear depth value to be used if the loadAction property is Clear
    */
    @property double clearDepth();
    @property void clearDepth(double);

    /**
        The filter to be used for depth multisample resolve.
        
        Defaults to Sample0.
    */
    @property MTLMultisampleDepthResolveFilter depthResolveFilter();
    @property void depthResolveFilter(MTLMultisampleDepthResolveFilter);
}

/**
    Constants used to control the multisample stencil resolve operation.
*/
enum MTLMultisampleStencilResolveFilter : NSUInteger {

    /**
        The stencil sample corresponding to sample 0. 
        
        This is the default behavior.
    */
    Sample0               = 0,

    /**
        The stencil sample corresponding to whichever depth sample is selected by the depth resolve filter. 
        If depth resolve is not enabled, the stencil sample is chosen based on what a depth resolve filter 
        would have selected.
    */
    DepthResolvedSample   = 1,
}

/**
    A stencil render target that serves as the output destination 
    for stencil pixels generated by a render pass.
*/
extern(Objective-C)
extern class MTLRenderPassStencilAttachmentDescriptor : MTLRenderPassAttachmentDescriptor {
@nogc nothrow:
public:

    /**
        Returns a new instance of the receiving class.
    */
    override static MTLRenderPassStencilAttachmentDescriptor alloc() @selector("alloc");

    /**
        Implemented by subclasses to initialize a new object (the receiver) 
        immediately after memory for it has been allocated.
    */
    override MTLRenderPassStencilAttachmentDescriptor init() @selector("init");

    /**
        The clear stencil value to be used if the loadAction property is Clear
    */
    @property uint clearDepth() @selector("clearDepth");
    @property void clearDepth(uint) @selector("setClearDepth:");

    /**
        The filter to be used for stencil multisample resolve. 
        
        Defaults to Sample0.
    */
    @property MTLMultisampleStencilResolveFilter stencilResolveFilter() @selector("stencilResolveFilter");
    @property void stencilResolveFilter(MTLMultisampleStencilResolveFilter) @selector("setStencilResolveFilter:");
}

/**
    A group of render targets that hold the results of a render pass.
*/
extern(Objective-C)
extern class MTLRenderPassDescriptor : NSObject {
@nogc nothrow:
public:

    /**
        Create an autoreleased default frame buffer descriptor
    */
    static MTLRenderPassDescriptor create() @selector("renderPassDescriptor");

    /**
        Color attachments.
    */
    @property MTLRenderPassColorAttachmentDescriptorArray colorAttachments() const @selector("colorAttachments");

    /**
        Depth attachment.
    */
    @property MTLRenderPassDepthAttachmentDescriptor depthAttachment() @selector("depthAttachment");
    @property void depthAttachment(MTLRenderPassDepthAttachmentDescriptor) @selector("setDepthAttachment:");

    /**
        Stencil attachment.
    */
    @property MTLRenderPassStencilAttachmentDescriptor stencilAttachment() @selector("stencilAttachment");
    @property void stencilAttachment(MTLRenderPassStencilAttachmentDescriptor) @selector("setStencilAttachment:");

    /**
        Buffer into which samples passing the depth and stencil tests are counted.
    */
    @property MTLBuffer visibilityResultBuffer() @selector("visibilityResultBuffer");
    @property void visibilityResultBuffer(MTLBuffer) @selector("setVisibilityResultBuffer:");

    /**
        The number of active layers.
    */
    @property NSUInteger renderTargetArrayLength() @selector("renderTargetArrayLength");
    @property void renderTargetArrayLength(NSUInteger) @selector("setRenderTargetArrayLength:");

    /**
        The per sample size in bytes of the largest explicit imageblock layout in the renderPass.
    */
    @property NSUInteger imageblockSampleLength() @selector("imageblockSampleLength");
    @property void imageblockSampleLength(NSUInteger) @selector("setImageblockSampleLength:");

    /**
        The per tile size in bytes of the persistent threadgroup memory allocation.
    */
    @property NSUInteger threadgroupMemoryLength() @selector("threadgroupMemoryLength");
    @property void threadgroupMemoryLength(NSUInteger) @selector("setThreadgroupMemoryLength:");

    /**
        The width in pixels of the tile.

        Defaults to 0.
        Zero means Metal chooses a width that fits within the local memory.
    */
    @property NSUInteger tileWidth() @selector("tileWidth");
    @property void tileWidth(NSUInteger) @selector("setTileWidth:");

    /**
        The height in pixels of the tile.

        Defaults to 0.
        Zero means Metal chooses a height that fits within the local memory.
    */
    @property NSUInteger tileHeight() @selector("tileHeight");
    @property void tileHeight(NSUInteger) @selector("setTileHeight:");

    /**
        The raster sample count for the render pass when no attachments are given.
    */
    @property NSUInteger defaultRasterSampleCount() @selector("defaultRasterSampleCount");
    @property void defaultRasterSampleCount(NSUInteger) @selector("setDefaultRasterSampleCount:");

    /**
        The width in pixels to constrain the render target to.

        Defaults to 0.
        
        If non-zero the value must be smaller than or equal to the minimum 
        width of all attachments.
    */
    @property NSUInteger renderTargetWidth() @selector("renderTargetWidth");
    @property void renderTargetWidth(NSUInteger) @selector("setRenderTargetWidth:");

    /**
        The height in pixels to constrain the render target to.

        Defaults to 0. 
        
        If non-zero the value must be smaller than or equal to the minimum 
        height of all attachments.
    */
    @property NSUInteger renderTargetHeight() @selector("renderTargetHeight");
    @property void renderTargetHeight(NSUInteger) @selector("setRenderTargetHeight:");

    /**
        Configure the custom sample positions, to be used in MSAA rendering 
        (i.e. when sample count > 1).
    */
    void tileWidthSamplePositions(const(MTLSamplePosition)* position, NSUInteger count) @selector("setSamplePositions:count:");

    /**
        Retrieve the previously configured custom sample positions. 

        The positions input array will only be modified when count specifies a length 
        sufficient for the number of previously configured positions.
    */
    NSUInteger getSamplePositions(MTLSamplePosition* position, NSUInteger count) @selector("getSamplePositions:count:");
}

/**
    Indicates whether shader validation in an enabled or disabled state, 
    or neither state.
*/
enum MTLShaderValidation : NSInteger {
    Default,
    Disabled,
    Enabled
}